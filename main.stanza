; Generated by JITX 2.14.0-rc.4
#use-added-syntax(jitx)
defpackage main :
  import core
  import jitx
  import jitx/commands
  import ocdb/utils/generic-components
  import helpers

; Define the shape/size of the board
val board-shape = RoundedRectangle(40.0, 50.0, 0.25)

; Setup the board
defn setup-board () :
  set-board(ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313, board-shape))
  set-rules(ocdb/manufacturers/rules/jlcpcb-rules)

pcb-module lowpass-filter (frequency:Double, resistance:Double) :
  pin in
  pin out
  pin gnd

  var x = 0.0
  var y = 0.0

  var capacitance = closest-std-val(1.0 / (2.0 * 3.1415 * resistance * frequency), 5.0)
  var res = closest-std-val(resistance, 5.0)

  inst resistor : database-part(["category" => "resistor", "resistance" => res, "mounting" => "smd", "case" => "0603"])
  inst capacitor : database-part(["category" => "capacitor", "capacitance" => capacitance, "mounting" => "smd", "case" => "0603"])
  
  place(resistor) at loc(x, y, 0.0) on Top
  var r-val = to-string("%_ Î©" % [res])
  inst r-label : ocdb/artwork/board-text/text(r-val, 1.0, 0.0)
  place(r-label) at loc(x, y - 2.0, 0.0) on Top 

  place(capacitor) at loc(3.0, -0.5, 0.0) on Top
  var c-val = to-string("%_ F" % [capacitance])
  inst c-label : ocdb/artwork/board-text/text(c-val, 1.0, 0.0)
  place(c-label) at loc(x + 4.0, y + 2.0, 0.0) on Top 

  net (in resistor.p[1])
  net (resistor.p[2] capacitor.p[1] out)
  net (capacitor.p[2] gnd)

pcb-module lowpass-filter-cascade (frequency:Double, order:Int) :
  pin in
  pin out
  pin gnd
eeee
  ; Instantiate components and base values
  var resistance = 100.0
  var x = 0.0
  var y = 0.0
  
  ; Connect first filter to input
  inst first-filter : lowpass-filter(frequency, resistance)
  place(first-filter) at loc(x, y, 0.0) on Top

  net (in first-filter.in)
  net (first-filter.gnd gnd)

  var prev-filter = first-filter

  ; if order > 1 , for each intermediate stage:
  if order > 1 :
    for n in 0 to order - 1 do :
      resistance = resistance * 10.0
      inst filter : lowpass-filter(frequency, resistance)
      x = x + 10.0
      place(filter) at loc(x, y, 0.0) on Top
      net (prev-filter.out filter.in)
      net (filter.gnd gnd)
      prev-filter = filter

  net (prev-filter.out out)

  var filter-label = to-string("Order %_ filter" % [order])
  x = x / 2.0
  y = y + 5.0
  inst my-label : ocdb/artwork/board-text/text(filter-label, 1.0, 0.0)
  place(my-label) at loc(x, y, 0.0) on Top 

pcb-module filter-board :

  inst lp1 : lowpass-filter-cascade(100000.0, 1)
  place(lp1) at loc(-1.0, 12.0, 0.0) on Top
  val input-test1 = add-testpoint([lp1.in], Testpoint-PTHLoop)
  place(input-test1) at loc(-15.0,15.0,0.0) on Top 

  val output-test1 = add-testpoint([lp1.out], Testpoint-PTHLoop)
  place(output-test1) at loc(15.0, 15.0, 0.0) on Top

  inst lp2 : lowpass-filter-cascade(100000.0, 2)
  place(lp2) at loc(-7.0, 0.0, 0.0) on Top
  val input-test2 = add-testpoint([lp2.in], Testpoint-PTHLoop)
  val output-test2 = add-testpoint([lp2.out], Testpoint-PTHLoop)

  inst lp3 : lowpass-filter-cascade(100000.0, 3)
  place(lp3) at loc(-12.0, -12.0, 0.0) on Top
  val input-test3 = add-testpoint([lp3.in], Testpoint-PTHLoop)
  val output-test3 = add-testpoint([lp3.out], Testpoint-PTHLoop)

  net GND (lp1.gnd lp2.gnd lp3.gnd)

  val ground-test1 = add-testpoint([GND], Testpoint-PTHLoop)
  inst sig-gnd-val : ocdb/artwork/board-text/text("Signal GND", 1.0, 0.0)
  place(sig-gnd-val) at loc(-14.0, -20.0, 0.0) on Top 

  val ground-test2 = add-testpoint([GND], Testpoint-PTHLoop) 
  inst fn-gnd-val : ocdb/artwork/board-text/text("Function GND", 1.0, 0.0)
  place(fn-gnd-val) at loc(14.0, -20.0, 0.0) on Top 

  geom(GND) : 
    copper-pour(LayerIndex(1), isolate = 0.2) = board-shape

  ; Write the board version on silkscreen
  inst version-label  : ocdb/artwork/board-text/version-silkscreen("Ayon's Low Pass Filter Board")
  place(version-label) at loc(0.0, height(board-shape) / 2.0 - 1.0) on Top

; Set the design name - a directory with this name will be generated under the "designs" directory
set-current-design("jitx-design")

; Set the schematic sheet size
set-paper(ANSI-A)

; Setup the board properties
setup-board()

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(filter-board)

; Use any helper function from helpers.stanza here
; run-check-on-design(my-design)

; View the results
view-board()
; view-schematic()
view-design-explorer()
